# resilience-service.yml
server:
  port: 8090

spring:
  application:
    name: resilience-service
  
  # Configuraci贸n de Kafka
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: resilience-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "*"
        spring.json.use.type.headers: false
        spring.json.value.default.type: com.example.resilienceservice.model.ConfigChangeEvent
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    listener:
      ack-mode: RECORD
      missing-topics-fatal: false

# Actuator
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true

# T贸picos de Kafka
kafka:
  topics:
    config-changes: config-changes-topic
    resilience-actions: resilience-actions-topic

# Configuraci贸n de microservicios
microservices:
  urls:
    microusers: http://microusers:8081
    microproducts: http://microproducts:8083
    microorders: http://microorders:8082
    frontend: http://frontend:8084

# Configuraci贸n de monitoreo
resilience:
  monitor:
    enabled: true
    checkInterval: 60000  # 60 segundos
    alertThresholds:
      circuitBreaker:
        failureRateThreshold: 50
      retry:
        maxAttempts: 3
      rateLimiter:
        limitForPeriod: 10
