package rules;  

import java.time.LocalDateTime;
import java.util.UUID;
import java.util.Map;
import java.util.HashMap;  
import com.example.resilienceservice.model.ServiceMetrics;
import com.example.resilienceservice.model.ResilienceAction;
import com.example.resilienceservice.model.ResilienceAction.ResilienceType;
import com.example.resilienceservice.service.ResilienceMonitorService.ActionsContainer;

global org.slf4j.Logger log;

/**
 * Regla 1: Aplica un Circuit Breaker cuando la latencia supera 500ms
 */
rule "CircuitBreakerWhenLatencyHigh"
    when
        $metrics : ServiceMetrics()
        eval($metrics.getLatencyMs() > 500)
        $container : ActionsContainer()
    then
        // Extraemos el nombre de servicio en el then
        String serviceName = $metrics.getServiceName();
        long latency = $metrics.getLatencyMs();
        log.warn("[Drools] Latencia alta ({} ms) en servicio: {}", latency, serviceName);

        ResilienceAction action = new ResilienceAction();
        action.setId(UUID.randomUUID().toString());
        action.setType(ResilienceType.CIRCUIT_BREAKER);
        action.setTargetService("frontend");
        action.setTargetName("microusersCircuitBreaker");
        action.setTimestamp(LocalDateTime.now());

        Map params = new HashMap();
        params.put("failureRateThreshold", "50");
        params.put("slidingWindowSize", "10");
        params.put("waitDurationInOpenState", "5000");
        action.setParams(params);

        $container.addAction(action);
end

/**
 * Regla 2: Aplica Retry cuando el errorCount estÃ¡ entre 10 y 20
 */
rule "RetryWhenErrorCountModerate"
    when
        $metrics : ServiceMetrics()
        eval($metrics.getErrorCount() > 10 && $metrics.getErrorCount() <= 20)
        $container : ActionsContainer()
    then
        int errors = $metrics.getErrorCount();
        String serviceName = $metrics.getServiceName();

        log.warn("[Drools] ErrorCount moderado ({}), activando Retry para servicio: {}",
                 errors, serviceName);

        ResilienceAction action = new ResilienceAction();
        action.setId(UUID.randomUUID().toString());
        action.setType(ResilienceType.RETRY);
        action.setTargetService("frontend");
        action.setTargetName("microproductsRetry");
        action.setTimestamp(LocalDateTime.now());

        Map params = new HashMap();
        params.put("maxAttempts", "5");
        params.put("waitDuration", "1000");
        action.setParams(params);

        $container.addAction(action);
end

/**
 * Regla 3: Aplica Rate Limiter cuando el errorCount es muy alto (> 20).
 */
rule "RateLimiterWhenErrorCountHigh"
    when
        $metrics : ServiceMetrics()
        eval($metrics.getErrorCount() > 20)
        $container : ActionsContainer()
    then
        int errors = $metrics.getErrorCount();
        String serviceName = $metrics.getServiceName();

        log.warn("[Drools] ErrorCount muy alto ({}), aplicando Rate Limiter en servicio: {}",
                 errors, serviceName);

        ResilienceAction action = new ResilienceAction();
        action.setId(UUID.randomUUID().toString());
        action.setType(ResilienceType.RATE_LIMITER);
        action.setTargetService("frontend");
        action.setTargetName("microordersRateLimiter");
        action.setTimestamp(LocalDateTime.now());

        Map params = new HashMap();
        params.put("limitForPeriod", "5");
        params.put("limitRefreshPeriod", "1000");
        params.put("timeoutDuration", "3000");
        action.setParams(params);

        $container.addAction(action);
end
