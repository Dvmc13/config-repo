server:
  port: 8084

spring:
  application:
    name: frontend

  # Importante: para que lea configuración remota
  cloud:
    config:
      uri: http://config-server:8888
      fail-fast: true
      # Esto es opcional, pero evita warnings sobre "import-check" en versiones nuevas
      import-check:
        enabled: false
    # Habilita la comunicación con Spring Cloud Bus (Kafka/Rabbit)
    bus:
      enabled: true

  profiles:
    # Activa un perfil local por defecto y 'chaos-monkey' 
    # (puede ser sobreescrito con SPRING_PROFILES_ACTIVE)
    active: ${SPRING_PROFILES_ACTIVE:default,chaos-monkey}
    
resilience4j:
  circuitbreaker:
    configs:
      default:
        failureRateThreshold: 20  # era 50
        waitDurationInOpenState: 10s  # era 5s

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
    chaosmonkey:
      enabled: true

# Configuración local de Chaos Monkey (fallback),
# para poder inyectar fallos en controladores,
# y si desde el Config Server se sobreescribe, se tomarán esos valores.
chaos:
  monkey:
    enabled: true
    watcher:
      # True si quieres inyectar fallos en clases con @Controller
      controller: true
      # True si quieres inyectar fallos en clases con @RestController
      restController: true
      # Actívalo sólo si tienes clases con @Service
      service: false
      # Si no tienes @Repository, puedes dejarlo false
      repository: false
      # Si no tienes @Component genéricas que quieras atacar, pon false
      component: false
    assaults:
      # Sólo latencia de momento (puedes poner exceptionsActive: true si quieres que lance errores)
      latencyActive: true
      exceptionsActive: false
      killApplicationActive: false
      # Nivel de “agresividad” (depende de la versión de Chaos Monkey)
      level: 3
      # Rango de latencia en ms (desde 1000ms hasta 3000ms)
      latencyRangeStart: 1000
      latencyRangeEnd: 3000
